{
  "articles": [
    {
      "path": "about.html",
      "title": "Maps",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\nIn this tutorial you will know, how to implement a raster layer into your maps. We will observe only an option for adding a raster layer as an object, which only “covers” the basemap. For more advanced way of setting a raster map as an element of the WMS server, we will need WMS server itself. This task need more resources and knowledge of the project server-side. Therefore, we will observe the simplest way, which needs only images and RStudio. No advance knowledge of programming needed, just some familiarity with RStudio: what it is, how to add commands.\nPreparing the dataset and making a simple map\nLet’s think of possible questions that are risen before a historian, who has some data, related to the space. It will be useful to visualize them as on the map.\nFor instance, we have a table, which contains some geographical names that can be easily identified with longitudes and latitudes.\nFor example, we have an example of 5 entities with Italian cities that simply can be visualized on a modern map. Let’s use the most popular library for mapping - leaflet. It’s a simple, powerful, flexible and highly customizable library, which allows to make awesome maps.\n\n                    City      long      lat           Province\n1                 Madrid -3.703889 40.41250 Area metropolitana\n2                Cordoba -4.778700 37.88680          Andalusia\n3                Segovia -4.118333 40.94806    Castilia y Leon\n4 Santiago de Compostela -8.544444 42.87778            Galicia\n5              Santander -3.805000 43.46278          Cantabria\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"http://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Area metropolitana\",\"Andalusia\",\"Castilia y Leon\",\"Galicia\",\"Cantabria\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":[]}\nThe code of this very basic map is simple. First, you need to create a map and cast leaflet function. Use magritte %>% to connect functions without multiple calling. Then, create a basemap via addTiles(). For the next step, let’s add our points. Since we have already prepared a dataset, we will use it with an operator $ which will indicate on particular columns with geodata. We basically need two columns: lng and lat, but we can also add a popup for our points. Therefore, we need to use lng=spain_sample$long, lat=spain_sample$lat that R understand, which columns contain the information about coordinates.\ninstall.packages(\"leaflet\")\nmap <- leaflet() %>%\naddTiles() %>%  # Default OpenStreetMap basemap\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat,\npopup=spain_sample$Province\")\nmap\nThis is a basic basemap, but you can add any other map own via addProviderTiles(). Let’s use something not very typical for maps, for instance a watercolor basemap, provided by Stamen.\nmap <- leaflet() %>%`\naddProviderTiles(\"Stamen.Watercolor\") %>%  # All Stamen maps avalible in http://maps.stamen.com NOTE use \"\" for adding custom maps\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat,`\npopup=spain_sample$Province\")`\nmap\nAnd we will get an artistic result.\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"Stamen.Watercolor\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Area metropolitana\",\"Andalusia\",\"Castilia y Leon\",\"Galicia\",\"Cantabria\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":[]}\nMarking an application and adding a raster image\nAs we already know how to make very basic maps, we can now create a map with a raster layer above, without maintaining a Web Map Server, which store geographical data.\nI found a map in David Rumsey Historical Map Collection a map in David Rumsey Historical Map Collection Spain in Portugal in the 19th century (1832). This resource has enormous number of historical maps, which can be exported as jpg or geotiff. We need jpg. I cuted this image in Photoshop and saved it as .png. What we need first, is to define, if we wish to make the app. For doing this, let’s create a Shiny App, via File > New File. RStudio will offer you to create a directory, where RStudio will storage the project and where you can add resources for the app.\nYou will get a standard shiny layout with UI - user interface with graphic elements, and server part, where we will implement our functions. There is a huge variety of shiny extensions, but we will use just basics.\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nWe need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example. Let’s add our other libraries we need. We will need leaflet, DT for operations with datatables and htmlwidgets for adding a JavaScript function, I will explain it further.\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(DT)\nlibrary(htmlwidgets)\nui <- fluidPage(\n    # Application title\n    titlePanel(\"Map app\"),\n        mainPanel()\n)\n\nserver <- function(input, output) {\n}\n\nshinyApp(ui = ui, server = server)\nWe need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example.\nAt this moment this app is empty. Let’s add the data. First of all, we need to place our map on the main panel and use mainPanel(leafletOutput(\"map\")).\nThen, let’s move to the server part, where we explain R, what is the ‘map’ we call. For doing this, we define “map” via output and indicate “map” using $. Then, the code will be the same as we created before.\noutput$map <- renderLeaflet({\nleaflet() %>% \naddProviderTiles(\"Stamen.Watercolor\") %>%\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup=spain_sample$Province)\n})\nBut for adding a raster layer, we need to do a certain trick. First of all, we should create a folder indise our project www where we will collect raster maps. In this case, our project will look so:\nThen, let’s create a function, which will add a raster image to the map. It’s an additional function, created in JavaScript. We should use htmlwidgets library and onRender function, where we will add our image and its borders. I already prepared the coordinates. Note, these coordinates represent a diagonal between the lowest left and highest right points.\nhtmlwidgets::onRender(\"\nfunction(el, x) {\nvar map = this;\nvar imageUrl = 'map_spain.png'; \nvar imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]];\nL.imageOverlay(imageUrl, imageBounds).addTo(map);\n}\n\")\nNote, this maps is not super accurate that’s connceted with projection errors. For avoiding it, we can use Georefferencing for modern (19th century and below) maps. But it’s a separate topic. For now let’s make more advanced popups with additional information. For this we shall use htmlwidgets too, because we will pack the information about the point inside a html container. For making it, we will use paste and present the data we wish to show if we are working on html page:\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup =\npaste('<font face=\"helvetica\"',\n'<font size=\"3\">', '<strong>', spain_sample$Province, '<\/strong>', '<\/font>',\n'<br/>','<strong>', 'City: ', '<\/strong>', spain_sample$City, \n'<\/font>',' '))\nFor the last thing, let’s add style to our map and make it for the whole screen. tags$style(type = \"text/css\", \"#map {height: calc(90vh - 80px) !important;}\")\nIn total, our application sould be like this example:\nlibrary(shiny)\nlibrary(readr)\nlibrary(DT)\nlibrary(leaflet)\n\n#data\nspain_sample <- read_delim(\"spain_sample.csv\", \n    delim = \";\", escape_double = FALSE, trim_ws = TRUE)\n\nui <- fluidPage(\n    #Application style.\n    tags$style(type = \"text/css\", \"#map {height: calc(90vh - 80px) !important;}\"),\n    \n    # Application title\n    titlePanel(\"Map app\"),\n    mainPanel(leafletOutput('map'))\n        )\n\n\nserver <- function(input, output) {\n\n    output$map <- renderLeaflet({\n        leaflet() %>% \n            addProviderTiles(\"Stamen.Watercolor\") %>%\n            addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup =\n                           paste('<font face=\"helvetica\"',\n                                 '<font size=\"3\">', '<strong>', spain_sample$Province, '<\/strong>', '<\/font>',\n                                 '<br/>','<strong>', 'City: ', '<\/strong>', spain_sample$City, \n                                 '<\/font>',' '))  %>%\n        htmlwidgets::onRender(\"\n      function(el, x) {\n        var map = this;\n        var imageUrl = 'map_spain.png';\n        var imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]];\n\n        L.imageOverlay(imageUrl, imageBounds).addTo(map);\n      }\n      \")\n    })\n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"Stamen.Watercolor\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Area metropolitana <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Madrid <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Andalusia <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Cordoba <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Castilia y Leon <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Segovia <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Galicia <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Santiago de Compostela <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Cantabria <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Santander <\\/font>  \"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x) {\\n        var map = this;\\n        var imageUrl = 'https://sun9-18.userapi.com/impg/cAHOligKsw6hjPWdZZtvgWnXwZ16heXV5DrdlQ/iB02-Ok5m7s.jpg?size=2560x1890&quality=95&sign=ff2034d5e42307272bb197ebbb8802dc&type=album';\\n        var imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]];\\n\\n        L.imageOverlay(imageUrl, imageBounds).addTo(map);\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}\nConclusion\nWe finihed this little app and added a historical map without implementing a WMS layer.\n\n\n\n",
      "last_modified": "2022-02-13T02:55:10+01:00"
    },
    {
      "path": "index.html",
      "title": "My Website",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-02-13T02:57:56+01:00"
    },
    {
      "path": "maps.html",
      "title": "Maps",
      "description": "Maps",
      "author": [],
      "contents": "\nIn this tutorial you will know, how to implement a raster layer into your maps. We will observe only an option for adding a raster layer as an object, which only “covers” the basemap. For more advanced way of setting a raster map as an element of the WMS server, we will need WMS server itself. This task need more resources and knowledge of the project server-side. Therefore, we will observe the simplest way, which needs only images and RStudio. No advance knowledge of programming needed, just some familiarity with RStudio: what it is, how to add commands.\nPreparing the dataset and making a simple map\nLet’s think of possible questions that are risen before a historian, who has some data, related to the space. It will be useful to visualize them as on the map.\nFor instance, we have a table, which contains some geographical names that can be easily identified with longitudes and latitudes.\nFor example, we have an example of 5 entities with Italian cities that simply can be visualized on a modern map. Let’s use the most popular library for mapping - leaflet. It’s a simple, powerful, flexible and highly customizable library, which allows to make awesome maps.\n\n                    City      long      lat           Province\n1                 Madrid -3.703889 40.41250 Area metropolitana\n2                Cordoba -4.778700 37.88680          Andalusia\n3                Segovia -4.118333 40.94806    Castilia y Leon\n4 Santiago de Compostela -8.544444 42.87778            Galicia\n5              Santander -3.805000 43.46278          Cantabria\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"http://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Area metropolitana\",\"Andalusia\",\"Castilia y Leon\",\"Galicia\",\"Cantabria\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":[]}\nThe code of this very basic map is simple. First, you need to create a map and cast leaflet function. Use magritte %>% to connect functions without multiple calling. Then, create a basemap via addTiles(). For the next step, let’s add our points. Since we have already prepared a dataset, we will use it with an operator $ which will indicate on particular columns with geodata. We basically need two columns: lng and lat, but we can also add a popup for our points. Therefore, we need to use lng=spain_sample$long, lat=spain_sample$lat that R understand, which columns contain the information about coordinates.\ninstall.packages(\"leaflet\")\nmap <- leaflet() %>%\naddTiles() %>%  # Default OpenStreetMap basemap\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat,\npopup=spain_sample$Province\")\nmap\nThis is a basic basemap, but you can add any other map own via addProviderTiles(). Let’s use something not very typical for maps, for instance a watercolor basemap, provided by Stamen.\nmap <- leaflet() %>%`\naddProviderTiles(\"Stamen.Watercolor\") %>%  # All Stamen maps avalible in http://maps.stamen.com NOTE use \"\" for adding custom maps\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat,`\npopup=spain_sample$Province\")`\nmap\nAnd we will get an artistic result.\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"Stamen.Watercolor\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"Area metropolitana\",\"Andalusia\",\"Castilia y Leon\",\"Galicia\",\"Cantabria\"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":[]}\nMarking an application and adding a raster image\nAs we already know how to make very basic maps, we can now create a map with a raster layer above, without maintaining a Web Map Server, which store geographical data.\nI found a map in David Rumsey Historical Map Collection a map in David Rumsey Historical Map Collection Spain in Portugal in the 19th century (1832). This resource has enormous number of historical maps, which can be exported as jpg or geotiff. We need jpg. I cuted this image in Photoshop and saved it as .png. What we need first, is to define, if we wish to make the app. For doing this, let’s create a Shiny App, via File > New File. RStudio will offer you to create a directory, where RStudio will storage the project and where you can add resources for the app.\nYou will get a standard shiny layout with UI - user interface with graphic elements, and server part, where we will implement our functions. There is a huge variety of shiny extensions, but we will use just basics.\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nWe need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example. Let’s add our other libraries we need. We will need leaflet, DT for operations with datatables and htmlwidgets for adding a JavaScript function, I will explain it further.\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(DT)\nlibrary(htmlwidgets)\nui <- fluidPage(\n    # Application title\n    titlePanel(\"Map app\"),\n        mainPanel()\n)\n\nserver <- function(input, output) {\n}\n\nshinyApp(ui = ui, server = server)\nWe need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example.\nAt this moment this app is empty. Let’s add the data. First of all, we need to place our map on the main panel and use mainPanel(leafletOutput(\"map\")).\nThen, let’s move to the server part, where we explain R, what is the ‘map’ we call. For doing this, we define “map” via output and indicate “map” using $. Then, the code will be the same as we created before.\noutput$map <- renderLeaflet({\nleaflet() %>% \naddProviderTiles(\"Stamen.Watercolor\") %>%\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup=spain_sample$Province)\n})\nBut for adding a raster layer, we need to do a certain trick. First of all, we should create a folder indise our project www where we will collect raster maps. In this case, our project will look so:\nThen, let’s create a function, which will add a raster image to the map. It’s an additional function, created in JavaScript. We should use htmlwidgets library and onRender function, where we will add our image and its borders. I already prepared the coordinates. Note, these coordinates represent a diagonal between the lowest left and highest right points.\nhtmlwidgets::onRender(\"\nfunction(el, x) {\nvar map = this;\nvar imageUrl = 'map_spain.png'; \nvar imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]];\nL.imageOverlay(imageUrl, imageBounds).addTo(map);\n}\n\")\nNote, this maps is not super accurate that’s connceted with projection errors. For avoiding it, we can use Georefferencing for modern (19th century and below) maps. But it’s a separate topic. For now let’s make more advanced popups with additional information. For this we shall use htmlwidgets too, because we will pack the information about the point inside a html container. For making it, we will use paste and present the data we wish to show if we are working on html page:\naddMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup =\npaste('<font face=\"helvetica\"',\n'<font size=\"3\">', '<strong>', spain_sample$Province, '<\/strong>', '<\/font>',\n'<br/>','<strong>', 'City: ', '<\/strong>', spain_sample$City, \n'<\/font>',' '))\nFor the last thing, let’s add style to our map and make it for the whole screen. tags$style(type = \"text/css\", \"#map {height: calc(90vh - 80px) !important;}\")\nIn total, our application sould be like this example:\nlibrary(shiny)\nlibrary(readr)\nlibrary(DT)\nlibrary(leaflet)\n\n#data\nspain_sample <- read_delim(\"spain_sample.csv\", \n    delim = \";\", escape_double = FALSE, trim_ws = TRUE)\n\nui <- fluidPage(\n    #Application style.\n    tags$style(type = \"text/css\", \"#map {height: calc(90vh - 80px) !important;}\"),\n    \n    # Application title\n    titlePanel(\"Map app\"),\n    mainPanel(leafletOutput('map'))\n        )\n\n\nserver <- function(input, output) {\n\n    output$map <- renderLeaflet({\n        leaflet() %>% \n            addProviderTiles(\"Stamen.Watercolor\") %>%\n            addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup =\n                           paste('<font face=\"helvetica\"',\n                                 '<font size=\"3\">', '<strong>', spain_sample$Province, '<\/strong>', '<\/font>',\n                                 '<br/>','<strong>', 'City: ', '<\/strong>', spain_sample$City, \n                                 '<\/font>',' '))  %>%\n        htmlwidgets::onRender(\"\n      function(el, x) {\n        var map = this;\n        var imageUrl = 'map_spain.png';\n        var imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]];\n\n        L.imageOverlay(imageUrl, imageBounds).addTo(map);\n      }\n      \")\n    })\n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"Stamen.Watercolor\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addMarkers\",\"args\":[[40.4125,37.8868,40.948056,42.877778,43.462778],[-3.703889,-4.7787,-4.118333,-8.544444,-3.805],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Area metropolitana <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Madrid <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Andalusia <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Cordoba <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Castilia y Leon <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Segovia <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Galicia <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Santiago de Compostela <\\/font>  \",\"<font face=\\\"helvetica\\\" <font size=\\\"3\\\"> <strong> Cantabria <\\/strong> <\\/font> <br/> <strong> City:  <\\/strong> Santander <\\/font>  \"],null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[37.8868,43.462778],\"lng\":[-8.544444,-3.703889]}},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x) {\\n        var map = this;\\nvar imageUrl = 'https://sun9-35.userapi.com/impg/-VBt-aqiuXxKDPBDOtCNlJDD-6iPIv42z0l3cQ/D0ZIOvX0SLw.jpg?size=2560x2008&quality=95&sign=e6dfd8c37a988b874f359d47590a8fb8&type=album';\\n        var imageBounds = [[35.798941, -10.178349], [44.037202, 4.733163]];\\n        L.imageOverlay(imageUrl, imageBounds).addTo(map);\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}\nConclusion\nWe finihed this little app and added a historical map without implementing a WMS layer.\n\n\n\n",
      "last_modified": "2022-02-13T02:59:42+01:00"
    }
  ],
  "collections": []
}
